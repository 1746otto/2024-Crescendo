package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.Command;
import frc.robot.CommandSwerveDrivetrain;
import frc.robot.Constants;
import frc.robot.subsystems.Vision;

import com.ctre.phoenix6.mechanisms.swerve.SwerveRequest;

import edu.wpi.first.math.geometry.Pose2d
import edu.wpi.first.math.geometry.Rotation2d
import edu.wpi.first.math.geometry.Pose2d
import edu.wpi.first.math.geometry.Pose3d;
import edu.wpi.first.math.geometry.Rotation3d;
import edu.wpi.first.math.geometry.Transform3d;
import edu.wpi.first.math.geometry.Translation3d;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.DriverStation.Alliance;

public class ShootAnywhereCommand extends Command {
    Vision robotVision;
    CommandSwerveDrivetrain drivetrain;
    SwerveRequest.FieldCentric drive;
    Pose2d redSpeaker;

    public ShootAnywhereCommand(Vision vision, CommandSwerveDrivetrain swerve, SwerveRequest.FieldCentric drive) {
        robotVision = vision;
        drivetrain = swerve;
        this.drive = drive;
        // redSpeaker = new Pose2d(FieldConstants.redSpeakerX, FieldConstants.redSpeakerY);
    }

    private Pose2d getSpeakerPose() {
        Optional<Alliance> ally = DriverStation.getAlliance();
        if (ally.isPresent()) {
            if (ally.get() == Alliance.Red) {
                return new Pose2d(FieldConstants.redSpeakerX, FieldConstants.redSpeakerY, new Rotation2d Unit.degreesToRadians(180));
            } else {
                return new Pose2d(FieldConstants.blueSpeakerX, FieldConstants.blueSpeakerY);
            }
        }
    }

    public Pose3d getBestRobotPose()
    {
        Pose3d[] poses = robotVision.outputRobotPoseVision();
        Pose3d combinedPose = poses[poses.length - 1];
        return combinedPose;
    }

    public double getCurrentYaw()
    {
        Pose3d pose = getBestRobotPose();
        return pose.getRotation().getZ();
    }
}
